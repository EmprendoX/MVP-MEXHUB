

üìò PRODUCT REQUIREMENTS DOCUMENT (PRD)
Hecho en M√©xico Connect ‚Äì MVP v1.0

1. Visi√≥n General
Prop√≥sito del MVP:
Construir la primera versi√≥n funcional de HUBMEX.COM, un directorio digital que conecta a fabricantes, proveedores de servicios y emprendedores dentro del ecosistema de manufactura mexicana.
El MVP debe permitir que:
	‚Ä¢ Los proveedores creen cuentas, publiquen sus productos o servicios y reciban mensajes.
	‚Ä¢ Los compradores o emprendedores puedan explorar, filtrar y contactar proveedores f√°cilmente.
Meta:
Validar la adopci√≥n inicial, medir las interacciones (publicaciones y contactos) y preparar la base tecnol√≥gica para el desarrollo posterior de funciones m√°s avanzadas (RFQs, IA, log√≠stica, etc.).

2. Objetivos del Producto
	‚Ä¢ Lanzar un directorio funcional y atractivo en menos de 60 d√≠as.
	‚Ä¢ Permitir publicaci√≥n y b√∫squeda efectiva de productos y servicios.
	‚Ä¢ Crear una base de datos validada de fabricantes y proveedores mexicanos.
	‚Ä¢ Medir las primeras m√©tricas de conexi√≥n y engagement.

3. P√∫blico Objetivo
Segmento	Descripci√≥n	Objetivo dentro de la App
Proveedores / Fabricantes	Empresas o talleres en M√©xico que producen bienes o prestan servicios industriales.	Publicar productos/servicios y recibir clientes.
Emprendedores / Compradores	Personas o negocios (principalmente en M√©xico y EE.UU.) que buscan fabricar o comprar productos hechos en M√©xico.	Explorar el directorio y contactar proveedores.
Freelancers / Especialistas	Expertos en log√≠stica, marketing, dise√±o, aduanas, etc.	Ofrecer servicios profesionales.

4. Alcance del MVP
Incluido
	‚Ä¢ Sistema de usuarios (registro/login).
	‚Ä¢ Perfiles de proveedor y comprador.
	‚Ä¢ Publicaci√≥n y visualizaci√≥n de productos y servicios.
	‚Ä¢ B√∫squeda y filtros por categor√≠a, tipo y ubicaci√≥n.
	‚Ä¢ Mensajer√≠a interna b√°sica entre usuarios.
	‚Ä¢ Dashboard de gesti√≥n para cada usuario.
	‚Ä¢ Backend y base de datos funcional con Supabase.
	‚Ä¢ Dise√±o web responsive.
Excluido (para fases posteriores)
	‚Ä¢ IA de recomendaci√≥n.
	‚Ä¢ Cotizaciones autom√°ticas (RFQ).
	‚Ä¢ Verificaci√≥n autom√°tica de empresas.
	‚Ä¢ Pasarelas de pago o comisiones.
	‚Ä¢ Integraciones log√≠sticas o fulfillment.

5. Funcionalidades Principales
5.1 Registro y Perfiles
	‚Ä¢ Registro con email / contrase√±a (opcional: Google login).
	‚Ä¢ Selecci√≥n de tipo de usuario: Proveedor / Comprador / Freelancer.
	‚Ä¢ Perfil editable con:
		‚óã Logo o imagen de perfil.
		‚óã Nombre de empresa o profesional.
		‚óã Descripci√≥n breve.
		‚óã Ubicaci√≥n (estado, ciudad).
		‚óã Categor√≠as / industria.
		‚óã Datos de contacto.
5.2 Publicaci√≥n de Productos / Servicios
	‚Ä¢ Formulario simple con:
		‚óã Nombre del producto o servicio.
		‚óã Descripci√≥n.
		‚óã Im√°genes (hasta 5).
		‚óã Categor√≠a y subcategor√≠a.
		‚óã Precio aproximado o rango.
		‚óã Tiempo de entrega estimado.
		‚óã Capacidad / MOQs (si aplica).
	‚Ä¢ Publicaciones visibles en el directorio general.
5.3 Exploraci√≥n y B√∫squeda
	‚Ä¢ P√°gina ‚ÄúExplorar‚Äù con:
		‚óã Filtros por categor√≠a, ubicaci√≥n, tipo (producto o servicio).
		‚óã Barra de b√∫squeda global por palabras clave.
	‚Ä¢ Vista tipo cuadr√≠cula (grid) con:
		‚óã Imagen principal.
		‚óã T√≠tulo, proveedor y ubicaci√≥n.
		‚óã Bot√≥n de ‚ÄúVer perfil / Contactar‚Äù.
5.4 Contacto y Mensajer√≠a
	‚Ä¢ Sistema de mensajes 1 a 1 dentro de la app.
	‚Ä¢ Notificaci√≥n por email cuando llega un mensaje nuevo.
	‚Ä¢ Historial b√°sico de conversaci√≥n.
5.5 Panel de Usuario (Dashboard)
	‚Ä¢ Ver y editar perfil.
	‚Ä¢ Crear, editar o eliminar publicaciones.
	‚Ä¢ Revisar mensajes.
	‚Ä¢ Ver estad√≠sticas b√°sicas: visitas y contactos.

6. Dise√±o UX/UI
Estilo visual:
	‚Ä¢ Minimalista, limpio, profesional.
	‚Ä¢ Paleta ‚ÄúHecho en M√©xico‚Äù: blanco, verde, dorado y gris claro.
	‚Ä¢ Layout tipo marketplace B2B (inspirado en Alibaba / Fiverr).
	‚Ä¢ Mobile-first y 100% responsive.
Componentes clave:
	‚Ä¢ Navbar con: Inicio | Explorar | Publicar | Mensajes | Mi Cuenta.
	‚Ä¢ Hero inicial con llamada a la acci√≥n: ‚ÄúDescubre fabricantes y servicios de M√©xico para el mundo.‚Äù
	‚Ä¢ Cards modulares con bordes redondeados y sombras suaves.

7. Arquitectura T√©cnica
Capa	Tecnolog√≠a	Descripci√≥n
Frontend	React + Next.js + TailwindCSS	UI web responsiva y r√°pida.
Backend / DB	Supabase	Autenticaci√≥n, CRUD, storage e inbox.
Storage	Supabase Storage o AWS S3	Im√°genes de productos.
Hosting	Netlify	Despliegue autom√°tico del frontend desde GitHub.
Email Notifs	Supabase Functions o Resend API	Alertas autom√°ticas por email.

8. Base de Datos (Tablas Principales)
-- =====================================================================
-- HUBMEX.COM ‚Äì MVP (Supabase/Postgres)
-- Tablas que cuadran 1:1 con el PRD
-- =====================================================================

-- Extensiones necesarias
create extension if not exists pgcrypto;  -- para gen_random_uuid()

-- ---------------------------------------------------------------------
-- ENUMS (creados solo si no existen)
-- ---------------------------------------------------------------------
do $$
begin
  if not exists (select 1 from pg_type where typname = 'user_type') then
    create type user_type as enum ('proveedor','comprador','freelancer');
  end if;
end $$;

do $$
begin
  if not exists (select 1 from pg_type where typname = 'listing_type') then
    create type listing_type as enum ('producto','servicio');
  end if;
end $$;

-- ---------------------------------------------------------------------
-- USERS (perfiles de app; referencia a auth.users opcional)
-- PRD: id, nombre, email, tipo, ubicacion, descripcion, avatar_url, created_at
-- Nota: id es UUID; si usas Supabase Auth, puedes referenciar auth.users(id)
-- ---------------------------------------------------------------------
create table if not exists public.users (
  id          uuid primary key default gen_random_uuid(),
  -- Si quieres vincular estrictamente a auth.users, descomenta la l√≠nea siguiente
  -- constraint fk_users_auth foreign key (id) references auth.users(id) on delete cascade,

  nombre      text,
  email       text, -- no unique para evitar choques con auth; √∫salo como denormalizaci√≥n
  tipo        user_type not null,
  ubicacion   text,
  descripcion text,
  avatar_url  text,
  created_at  timestamptz not null default now()
);

-- B√∫squedas frecuentes
create index if not exists idx_users_tipo       on public.users (tipo);
create index if not exists idx_users_ubicacion  on public.users (ubicacion);
create index if not exists idx_users_created_at on public.users (created_at desc);

-- ---------------------------------------------------------------------
-- LISTINGS (publicaciones de productos/servicios)
-- PRD: id, user_id, titulo, descripcion, categoria, tipo, precio, ubicacion, imagenes, created_at
-- ---------------------------------------------------------------------
create table if not exists public.listings (
  id          uuid primary key default gen_random_uuid(),
  user_id     uuid not null references public.users(id) on delete cascade,
  titulo      text not null,
  descripcion text,
  categoria   text,
  tipo        listing_type not null,
  precio      numeric, -- rango o aprox (PRD); sin check de >=0 para permitir vac√≠os
  ubicacion   text,
  imagenes    text[],  -- hasta 5 im√°genes recomendado en PRD
  created_at  timestamptz not null default now(),

  constraint chk_listings_imagenes_max5
    check (imagenes is null or array_length(imagenes, 1) <= 5)
);

-- √çndices para filtros y orden
create index if not exists idx_listings_user            on public.listings (user_id);
create index if not exists idx_listings_tipo            on public.listings (tipo);
create index if not exists idx_listings_categoria       on public.listings (categoria);
create index if not exists idx_listings_ubicacion       on public.listings (ubicacion);
create index if not exists idx_listings_created_at_desc on public.listings (created_at desc);

-- Full-Text Search (espa√±ol) sobre t√≠tulo+descripci√≥n+categor√≠a
-- Columna generada + √≠ndice GIN para b√∫squedas por palabra clave
alter table public.listings
  add column if not exists fts tsvector
  generated always as (
    setweight(to_tsvector('spanish', coalesce(titulo,'')), 'A') ||
    setweight(to_tsvector('spanish', coalesce(descripcion,'')), 'B') ||
    setweight(to_tsvector('spanish', coalesce(categoria,'')), 'C')
  ) stored;

create index if not exists idx_listings_fts on public.listings using gin (fts);

-- ---------------------------------------------------------------------
-- MESSAGES (mensajer√≠a interna 1 a 1)
-- PRD: id, sender_id, receiver_id, contenido, created_at
-- ---------------------------------------------------------------------
create table if not exists public.messages (
  id          uuid primary key default gen_random_uuid(),
  sender_id   uuid not null references public.users(id) on delete cascade,
  receiver_id uuid not null references public.users(id) on delete cascade,
  contenido   text not null,
  created_at  timestamptz not null default now()
);

-- √çndices para bandejas y orden
create index if not exists idx_messages_inbox   on public.messages (receiver_id, created_at desc);
create index if not exists idx_messages_outbox  on public.messages (sender_id,  created_at desc);

-- =====================================================================
-- (OPCIONAL) VISTA PARA JOIN R√ÅPIDO EN EXPLORAR
-- Une listing con nombre del proveedor y su ubicaci√≥n para cards
-- =====================================================================
create or replace view public.v_listings_explore as
select
  l.id,
  l.titulo,
  l.descripcion,
  l.categoria,
  l.tipo,
  l.precio,
  l.ubicacion,
  l.imagenes,
  l.created_at,
  u.id          as proveedor_id,
  u.nombre      as proveedor_nombre,
  u.ubicacion   as proveedor_ubicacion,
  u.avatar_url  as proveedor_avatar
from public.listings l
join public.users    u on u.id = l.user_id;

-- =====================================================================
-- (OPCIONAL) RLS ‚Äì Pol√≠ticas seguras (si quieres activarlas ahora)
-- Para MVP p√∫blico, puedes dejar RLS desactivado hasta tener panel.
-- =====================================================================

-- -- Habilitar RLS
-- alter table public.users    enable row level security;
-- alter table public.listings enable row level security;
-- alter table public.messages enable row level security;

-- -- USERS: leer todos; actualizar solo el propio registro; insertar solo como el propio uid
-- create policy users_select_all on public.users
--   for select using (true);

-- create policy users_update_own on public.users
--   for update using (auth.uid() = id);

-- create policy users_insert_self on public.users
--   for insert with check (auth.uid() = id);

-- -- LISTINGS: leer todos; escribir solo due√±o
-- create policy listings_select_all on public.listings
--   for select using (true);

-- create policy listings_write_own on public.listings
--   for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

-- -- MESSAGES: ver solo si eres parte; enviar solo como remitente autenticado
-- create policy messages_select_participant on public.messages
--   for select using (auth.uid() = sender_id or auth.uid() = receiver_id);

-- create policy messages_insert_sender on public.messages
--   for insert with check (auth.uid() = sender_id);

-- =====================================================================
-- NOTAS
-- - Si vas a usar Supabase Auth, considera poblar public.users al registrar
--   (id = auth.uid()). Puedes mantener el email solo como copia para b√∫squeda.
-- - La vista v_listings_explore es √∫til para la p√°gina ‚ÄúExplorar‚Äù.
-- - Para buscar por palabra clave: WHERE fts @@ plainto_tsquery('spanish', :q)
-- =====================================================================


9. M√©tricas de √âxito (KPIs MVP)
M√©trica	Descripci√≥n	Meta inicial
Usuarios activos	Cuentas registradas con publicaciones activas	500 en 60 d√≠as
Publicaciones activas	Productos o servicios listados	1,000
Conexiones generadas	Mensajes enviados / contactos realizados	200+
Tasa de retenci√≥n semanal	Usuarios que regresan al menos una vez por semana	> 35%
Feedback positivo	Encuestas o NPS b√°sico	> 8/10

10. Estrategia de Lanzamiento
Fase 1 ‚Äì Prueba cerrada (semana 1‚Äì4):
	‚Ä¢ Invitar a fabricantes conocidos y contactos de The Product Lab.
	‚Ä¢ Crear 50 perfiles iniciales de ejemplo.
Fase 2 ‚Äì Apertura p√∫blica (semana 5‚Äì8):
	‚Ä¢ Lanzamiento web oficial con registro libre.
	‚Ä¢ Campa√±as en redes y grupos de emprendedores.
	‚Ä¢ Alianzas con c√°maras industriales mexicanas.
Fase 3 ‚Äì Optimizaci√≥n (semana 9‚Äì12):
	‚Ä¢ A√±adir m√©tricas internas y mejoras UX.
	‚Ä¢ Preparar integraci√≥n IA para versi√≥n 2.0.

11. Riesgos y Mitigaciones
Riesgo	Mitigaci√≥n
Pocos proveedores iniciales	Cargar manualmente cat√°logos verificados de fabricantes mexicanos.
Publicaciones falsas o spam	Revisi√≥n manual inicial y verificaci√≥n por correo.
Baja adopci√≥n	Campa√±as en redes sociales y colaboraci√≥n con clusters industriales.
Escalabilidad del backend	Uso de Supabase y hosting escalable.

12. Futuras Iteraciones
	‚Ä¢ IA de b√∫squeda inteligente.
	‚Ä¢ Sistema de cotizaciones (RFQ).
	‚Ä¢ Integraci√≥n de log√≠stica y fulfillment.
	‚Ä¢ Verificaci√≥n KYC y certificaciones autom√°ticas.
	‚Ä¢ Marketplace B2B con pagos y contratos.
